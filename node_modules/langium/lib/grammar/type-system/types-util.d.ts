/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import { References } from '../../references/references';
import { MultiMap } from '../../utils/collections';
import { AstNodeLocator } from '../../workspace/ast-node-locator';
import { LangiumDocuments } from '../../workspace/documents';
import { Interface, Type, AbstractType } from '../generated/ast';
import { AstTypes, InterfaceType, Property, PropertyType, TypeOption } from './type-collector/types';
/**
 * Collects all properties of all interface types. Includes super type properties.
 * @param interfaces A topologically sorted array of interfaces.
 */
export declare function collectAllProperties(interfaces: InterfaceType[]): MultiMap<string, Property>;
export declare function distinctAndSorted<T>(list: T[], compareFn?: (a: T, b: T) => number): T[];
export declare function collectChildrenTypes(interfaceNode: Interface, references: References, langiumDocuments: LangiumDocuments, nodeLocator: AstNodeLocator): Set<Interface | Type>;
export declare function collectSuperTypes(ruleNode: AbstractType): Set<Interface>;
export declare function comparePropertyType(a: PropertyType, b: PropertyType): boolean;
export declare function mergeInterfaces(inferred: AstTypes, declared: AstTypes): InterfaceType[];
export declare function mergeTypesAndInterfaces(astTypes: AstTypes): TypeOption[];
/**
 * Performs topological sorting on the generated interfaces.
 * @param interfaces The interfaces to sort topologically.
 * @returns A topologically sorted set of interfaces.
 */
export declare function sortInterfacesTopologically(interfaces: InterfaceType[]): InterfaceType[];
export declare function addSubTypes(nameToType: Map<string, TypeOption>): void;
//# sourceMappingURL=types-util.d.ts.map