/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import { CstNode } from '../../../syntax-tree';
import { MultiMap } from '../../../utils/collections';
import { Assignment, Action, TypeAttribute } from '../../generated/ast';
export type Property = {
    name: string;
    optional: boolean;
    typeAlternatives: PropertyType[];
    astNodes: Set<Assignment | Action | TypeAttribute>;
};
export type PropertyType = {
    types: string[];
    reference: boolean;
    array: boolean;
};
export type AstTypes = {
    interfaces: InterfaceType[];
    unions: UnionType[];
};
export declare function isUnionType(type: TypeOption): type is UnionType;
export declare function isInterfaceType(type: TypeOption): type is InterfaceType;
export type TypeOption = InterfaceType | UnionType;
export declare class UnionType {
    name: string;
    realSuperTypes: Set<string>;
    subTypes: Set<string>;
    containerTypes: Set<string>;
    typeTypes: Set<string>;
    alternatives: PropertyType[];
    reflection: boolean;
    constructor(name: string, alts: PropertyType[], options?: {
        reflection: boolean;
    });
    toAstTypesString(): string;
    toDeclaredTypesString(reservedWords: Set<string>): string;
}
export declare class InterfaceType {
    name: string;
    realSuperTypes: Set<string>;
    subTypes: Set<string>;
    containerTypes: Set<string>;
    typeTypes: Set<string>;
    printingSuperTypes: string[];
    properties: Property[];
    superProperties: MultiMap<string, Property>;
    constructor(name: string, superTypes: string[], properties: Property[]);
    toAstTypesString(): string;
    toDeclaredTypesString(reservedWords: Set<string>): string;
}
export declare class TypeResolutionError extends Error {
    readonly target: CstNode | undefined;
    constructor(message: string, target: CstNode | undefined);
}
export declare function propertyTypesToString(alternatives: PropertyType[], mode?: 'AstType' | 'DeclaredType'): string;
//# sourceMappingURL=types.d.ts.map