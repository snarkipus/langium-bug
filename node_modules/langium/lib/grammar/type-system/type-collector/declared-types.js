"use strict";
/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectDeclaredTypes = void 0;
const internal_grammar_util_1 = require("../../internal-grammar-util");
const types_1 = require("./types");
function collectDeclaredTypes(interfaces, unions) {
    const declaredTypes = { unions: [], interfaces: [] };
    // add interfaces
    for (const type of interfaces) {
        const superTypes = type.superTypes.filter(e => e.ref).map(e => (0, internal_grammar_util_1.getTypeNameWithoutError)(e.ref));
        const properties = type.attributes.map(e => ({
            name: e.name,
            optional: e.isOptional === true,
            typeAlternatives: e.typeAlternatives.map(atomTypeToPropertyType),
            astNodes: new Set([e])
        }));
        declaredTypes.interfaces.push(new types_1.InterfaceType(type.name, superTypes, properties));
    }
    // add types
    for (const type of unions) {
        const alternatives = type.typeAlternatives.map(atomTypeToPropertyType);
        const reflection = type.typeAlternatives.length > 1 && type.typeAlternatives.some(e => { var _a; return ((_a = e.refType) === null || _a === void 0 ? void 0 : _a.ref) !== undefined; });
        declaredTypes.unions.push(new types_1.UnionType(type.name, alternatives, { reflection }));
    }
    return declaredTypes;
}
exports.collectDeclaredTypes = collectDeclaredTypes;
function atomTypeToPropertyType(type) {
    var _a, _b;
    let types = [];
    if (type.refType) {
        types = [type.refType.ref ? (0, internal_grammar_util_1.getTypeNameWithoutError)(type.refType.ref) : type.refType.$refText];
    }
    else {
        types = [(_a = type.primitiveType) !== null && _a !== void 0 ? _a : `'${(_b = type.keywordType) === null || _b === void 0 ? void 0 : _b.value}'`];
    }
    return { types, reference: type.isRef === true, array: type.isArray === true };
}
//# sourceMappingURL=declared-types.js.map