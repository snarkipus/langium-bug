"use strict";
/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.collectInferredTypes = void 0;
const name_provider_1 = require("../../../references/name-provider");
const collections_1 = require("../../../utils/collections");
const stream_1 = require("../../../utils/stream");
const ast_1 = require("../../generated/ast");
const internal_grammar_util_1 = require("../../internal-grammar-util");
const types_util_1 = require("../types-util");
const types_1 = require("./types");
class TypeGraph {
    constructor(context, root) {
        this.context = context;
        this.root = root;
    }
    getTypes() {
        const rootType = {
            name: this.root.name,
            properties: this.root.properties,
            ruleCalls: this.root.ruleCalls,
            super: []
        };
        if (this.root.children.length === 0) {
            return [{ alt: rootType, next: [] }];
        }
        else {
            return this.applyNext(this.root, {
                alt: rootType,
                next: this.root.children
            });
        }
    }
    applyNext(root, nextPath) {
        const splits = this.splitType(nextPath.alt, nextPath.next.length);
        const paths = [];
        for (let i = 0; i < nextPath.next.length; i++) {
            const split = splits[i];
            const part = nextPath.next[i];
            if (part.actionWithAssignment) {
                // If the path enters an action with an assignment which changes the current name
                // We already add a new path, since the next part of the part refers to a new inferred type
                paths.push({
                    alt: this.copyTypeAlternative(split),
                    next: []
                });
            }
            if (part.name !== undefined && part.name !== split.name) {
                if (part.actionWithAssignment) {
                    // We reset all properties, super types and ruleCalls since we are now in a new inferred type
                    split.properties = [];
                    split.ruleCalls = [];
                    split.super = [root.name];
                    split.name = part.name;
                }
                else {
                    split.super = [split.name, ...split.ruleCalls];
                    split.properties = [];
                    split.ruleCalls = [];
                    split.name = part.name;
                }
            }
            split.properties.push(...part.properties);
            split.ruleCalls.push(...part.ruleCalls);
            const path = {
                alt: split,
                next: part.children
            };
            if (path.next.length === 0) {
                path.alt.super = path.alt.super.filter(e => e !== path.alt.name);
                paths.push(path);
            }
            else {
                paths.push(...this.applyNext(root, path));
            }
        }
        return flattenTypes(paths);
    }
    splitType(type, count) {
        const alternatives = [];
        for (let i = 0; i < count; i++) {
            alternatives.push(this.copyTypeAlternative(type));
        }
        return alternatives;
    }
    copyTypeAlternative(value) {
        function copyProperty(value) {
            return {
                name: value.name,
                optional: value.optional,
                typeAlternatives: value.typeAlternatives,
                astNodes: value.astNodes,
            };
        }
        return {
            name: value.name,
            super: value.super,
            ruleCalls: value.ruleCalls,
            properties: value.properties.map(e => copyProperty(e))
        };
    }
    getSuperTypes(node) {
        const set = new Set();
        this.collectSuperTypes(node, node, set);
        return Array.from(set);
    }
    collectSuperTypes(original, part, set) {
        if (part.ruleCalls.length > 0) {
            // Each unassigned rule call corresponds to a super type
            for (const ruleCall of part.ruleCalls) {
                set.add(ruleCall);
            }
            return;
        }
        for (const parent of part.parents) {
            if (original.name === undefined) {
                this.collectSuperTypes(parent, parent, set);
            }
            else if (parent.name !== undefined && parent.name !== original.name) {
                set.add(parent.name);
            }
            else {
                this.collectSuperTypes(original, parent, set);
            }
        }
        if (part.parents.length === 0 && part.name) {
            set.add(part.name);
        }
    }
    connect(parent, children) {
        children.parents.push(parent);
        parent.children.push(children);
        return children;
    }
    merge(...parts) {
        if (parts.length === 1) {
            return parts[0];
        }
        else if (parts.length === 0) {
            throw new Error('No parts to merge');
        }
        const node = newTypePart();
        node.parents = parts;
        for (const parent of parts) {
            parent.children.push(node);
        }
        return node;
    }
}
function collectInferredTypes(parserRules, datatypeRules) {
    var _a;
    // extract interfaces and types from parser rules
    const allTypes = [];
    const context = {
        fragments: new Map()
    };
    for (const rule of parserRules) {
        allTypes.push(...getRuleTypes(context, rule));
    }
    const interfaces = calculateInterfaces(allTypes);
    const unions = buildSuperUnions(interfaces);
    const astTypes = extractUnions(interfaces, unions);
    // extract types from datatype rules
    for (const rule of datatypeRules) {
        const types = (0, ast_1.isAlternatives)(rule.definition) && rule.definition.elements.every(e => (0, ast_1.isKeyword)(e)) ?
            (0, stream_1.stream)(rule.definition.elements).filter(ast_1.isKeyword).map(e => `'${e.value}'`).toArray() :
            [(_a = (0, internal_grammar_util_1.getExplicitRuleType)(rule)) !== null && _a !== void 0 ? _a : 'string'];
        astTypes.unions.push(new types_1.UnionType(rule.name, toPropertyType(false, false, types)));
    }
    return astTypes;
}
exports.collectInferredTypes = collectInferredTypes;
function getRuleTypes(context, rule) {
    const type = newTypePart(rule);
    const graph = new TypeGraph(context, type);
    if (rule.definition) {
        collectElement(graph, graph.root, rule.definition);
    }
    return graph.getTypes();
}
function newTypePart(element) {
    return {
        name: (0, ast_1.isParserRule)(element) || (0, ast_1.isAction)(element) ? (0, internal_grammar_util_1.getTypeNameWithoutError)(element) : element,
        properties: [],
        ruleCalls: [],
        children: [],
        parents: [],
        actionWithAssignment: false
    };
}
/**
 * Collects all possible type branches of a given element.
 * @param state State to walk over element's graph.
 * @param type Element that collects a current type branch for the given element.
 * @param element The given AST element, from which it's necessary to extract the type.
 */
function collectElement(graph, current, element) {
    const optional = (0, internal_grammar_util_1.isOptionalCardinality)(element.cardinality);
    if ((0, ast_1.isAlternatives)(element)) {
        const children = [];
        if (optional) {
            // Create a new empty node
            children.push(graph.connect(current, newTypePart()));
        }
        for (const alt of element.elements) {
            const altType = graph.connect(current, newTypePart());
            children.push(collectElement(graph, altType, alt));
        }
        return graph.merge(...children);
    }
    else if ((0, ast_1.isGroup)(element) || (0, ast_1.isUnorderedGroup)(element)) {
        let groupNode = graph.connect(current, newTypePart());
        for (const item of element.elements) {
            groupNode = collectElement(graph, groupNode, item);
        }
        if (optional) {
            const skipNode = graph.connect(current, newTypePart());
            return graph.merge(skipNode, groupNode);
        }
        else {
            return groupNode;
        }
    }
    else if ((0, ast_1.isAction)(element)) {
        return addAction(graph, current, element);
    }
    else if ((0, ast_1.isAssignment)(element)) {
        addAssignment(current, element);
    }
    else if ((0, ast_1.isRuleCall)(element)) {
        addRuleCall(graph, current, element);
    }
    return current;
}
function addAction(graph, parent, action) {
    var _a;
    const typeNode = graph.connect(parent, newTypePart(action));
    if (action.type) {
        const type = (_a = action.type) === null || _a === void 0 ? void 0 : _a.ref;
        if (type && (0, name_provider_1.isNamed)(type))
            // cs: if the (named) type could be resolved properly also set the name on 'typeNode'
            //  for the sake of completeness and better comprehensibility during debugging,
            //  it's not supposed to have a effect on the flow of control!
            typeNode.name = type.name;
    }
    if (action.feature && action.operator) {
        typeNode.actionWithAssignment = true;
        typeNode.properties.push({
            name: action.feature,
            optional: false,
            typeAlternatives: toPropertyType(action.operator === '+=', false, graph.root.ruleCalls.length !== 0 ? graph.root.ruleCalls : graph.getSuperTypes(typeNode)),
            astNodes: new Set([action])
        });
    }
    return typeNode;
}
function addAssignment(current, assignment) {
    const typeItems = { types: new Set(), reference: false };
    findTypes(assignment.terminal, typeItems);
    const typeAlternatives = toPropertyType(assignment.operator === '+=', typeItems.reference, assignment.operator === '?=' ? ['boolean'] : Array.from(typeItems.types));
    current.properties.push({
        name: assignment.feature,
        optional: (0, internal_grammar_util_1.isOptionalCardinality)(assignment.cardinality),
        typeAlternatives,
        astNodes: new Set([assignment])
    });
}
function findTypes(terminal, types) {
    if ((0, ast_1.isAlternatives)(terminal) || (0, ast_1.isUnorderedGroup)(terminal) || (0, ast_1.isGroup)(terminal)) {
        for (const element of terminal.elements) {
            findTypes(element, types);
        }
    }
    else if ((0, ast_1.isKeyword)(terminal)) {
        types.types.add(`'${terminal.value}'`);
    }
    else if ((0, ast_1.isRuleCall)(terminal) && terminal.rule.ref) {
        types.types.add((0, internal_grammar_util_1.getRuleType)(terminal.rule.ref));
    }
    else if ((0, ast_1.isCrossReference)(terminal) && terminal.type.ref) {
        types.types.add((0, internal_grammar_util_1.getTypeNameWithoutError)(terminal.type.ref));
        types.reference = true;
    }
}
function addRuleCall(graph, current, ruleCall) {
    const rule = ruleCall.rule.ref;
    // Add all properties of fragments to the current type
    if ((0, ast_1.isParserRule)(rule) && rule.fragment) {
        const properties = getFragmentProperties(rule, graph.context);
        if ((0, internal_grammar_util_1.isOptionalCardinality)(ruleCall.cardinality)) {
            current.properties.push(...properties.map(e => (Object.assign(Object.assign({}, e), { optional: true }))));
        }
        else {
            current.properties.push(...properties);
        }
    }
    else if ((0, ast_1.isParserRule)(rule)) {
        current.ruleCalls.push((0, internal_grammar_util_1.getRuleType)(rule));
    }
}
function getFragmentProperties(fragment, context) {
    const existing = context.fragments.get(fragment);
    if (existing) {
        return existing;
    }
    const properties = [];
    context.fragments.set(fragment, properties);
    const fragmentName = (0, internal_grammar_util_1.getTypeNameWithoutError)(fragment);
    const typeAlternatives = getRuleTypes(context, fragment).filter(e => e.alt.name === fragmentName);
    properties.push(...typeAlternatives.flatMap(e => e.alt.properties));
    return properties;
}
/**
 * Calculate interfaces from all possible type branches.
 * [some of these interfaces will become types in the generated AST]
 * @param alternatives The type branches that will be squashed in interfaces.
 * @returns Interfaces.
 */
function calculateInterfaces(alternatives) {
    const interfaces = new Map();
    const ruleCallAlternatives = [];
    const flattened = flattenTypes(alternatives).map(e => e.alt);
    for (const flat of flattened) {
        const interfaceType = new types_1.InterfaceType(flat.name, flat.super, flat.properties);
        interfaces.set(interfaceType.name, interfaceType);
        if (flat.ruleCalls.length > 0) {
            ruleCallAlternatives.push(flat);
            flat.ruleCalls.forEach(e => {
                if (e !== interfaceType.name) { // An interface cannot subtype itself
                    interfaceType.subTypes.add(e);
                }
            });
        }
        // all other cases assume we have a data type rule
        // we do not generate an AST type for data type rules
    }
    for (const ruleCallType of ruleCallAlternatives) {
        for (const ruleCall of ruleCallType.ruleCalls) {
            const calledInterface = interfaces.get(ruleCall);
            if (calledInterface) {
                if (calledInterface.name !== ruleCallType.name) {
                    calledInterface.realSuperTypes.add(ruleCallType.name);
                }
            }
        }
    }
    return Array.from(interfaces.values());
}
function flattenTypes(alternatives) {
    const nameToAlternatives = alternatives.reduce((acc, e) => acc.add(e.alt.name, e), new collections_1.MultiMap());
    const types = [];
    for (const [name, namedAlternatives] of nameToAlternatives.entriesGroupedByKey()) {
        const properties = [];
        const ruleCalls = new Set();
        const type = { alt: { name, properties, ruleCalls: [], super: [] }, next: [] };
        for (const path of namedAlternatives) {
            const alt = path.alt;
            type.alt.super.push(...alt.super);
            type.next.push(...path.next);
            const altProperties = alt.properties;
            for (const altProperty of altProperties) {
                const existingProperty = properties.find(e => e.name === altProperty.name);
                if (existingProperty) {
                    altProperty.typeAlternatives
                        .filter(isNotInTypeAlternatives(existingProperty.typeAlternatives))
                        .forEach(type => existingProperty.typeAlternatives.push(type));
                    altProperty.astNodes.forEach(e => existingProperty.astNodes.add(e));
                }
                else {
                    properties.push(Object.assign({}, altProperty));
                }
            }
            alt.ruleCalls.forEach(ruleCall => ruleCalls.add(ruleCall));
        }
        for (const path of namedAlternatives) {
            const alt = path.alt;
            // A type with rule calls is not a real member of the type
            // Any missing properties are therefore not associated with the current type
            if (alt.ruleCalls.length === 0) {
                for (const property of properties) {
                    if (!alt.properties.find(e => e.name === property.name)) {
                        property.optional = true;
                    }
                }
            }
        }
        type.alt.ruleCalls = Array.from(ruleCalls);
        types.push(type);
    }
    return types;
}
function isNotInTypeAlternatives(typeAlternatives) {
    return (type) => {
        return !typeAlternatives.some(e => (0, types_util_1.comparePropertyType)(e, type));
    };
}
function buildSuperUnions(interfaces) {
    const unions = [];
    const allSupertypes = new collections_1.MultiMap();
    for (const interfaceType of interfaces) {
        for (const superType of interfaceType.realSuperTypes) {
            allSupertypes.add(superType, interfaceType.name);
        }
    }
    for (const [superType, types] of allSupertypes.entriesGroupedByKey()) {
        if (!interfaces.some(e => e.name === superType)) {
            unions.push(new types_1.UnionType(superType, toPropertyType(false, false, types), { reflection: true }));
        }
    }
    return unions;
}
/**
 * Filters interfaces, transforming some of them in unions.
 * The transformation criterion: no properties, but have subtypes.
 * @param interfaces The interfaces that have to be transformed on demand.
 * @returns Types and not transformed interfaces.
 */
function extractUnions(interfaces, unions) {
    var _a;
    for (const interfaceType of interfaces) {
        for (const superTypeName of interfaceType.realSuperTypes) {
            (_a = interfaces.find(e => e.name === superTypeName)) === null || _a === void 0 ? void 0 : _a.subTypes.add(interfaceType.name);
        }
    }
    const astTypes = { interfaces: [], unions };
    const typeNames = new Set(unions.map(e => e.name));
    for (const interfaceType of interfaces) {
        // the criterion for converting an interface into a type
        if (interfaceType.properties.length === 0 && interfaceType.subTypes.size > 0) {
            const alternatives = toPropertyType(false, false, Array.from(interfaceType.subTypes));
            const existingUnion = unions.find(e => e.name === interfaceType.name);
            if (existingUnion) {
                existingUnion.alternatives.push(...alternatives);
            }
            else {
                const type = new types_1.UnionType(interfaceType.name, alternatives, { reflection: true });
                type.realSuperTypes = interfaceType.realSuperTypes;
                astTypes.unions.push(type);
                typeNames.add(interfaceType.name);
            }
        }
        else {
            astTypes.interfaces.push(interfaceType);
        }
    }
    // After converting some interfaces into union types, these interfaces are no longer valid super types
    for (const interfaceType of astTypes.interfaces) {
        interfaceType.printingSuperTypes = [...interfaceType.realSuperTypes].filter(superType => !typeNames.has(superType));
    }
    return astTypes;
}
function toPropertyType(array, reference, types) {
    if (array || reference) {
        return [{ array, reference, types }];
    }
    return types.map(type => {
        return {
            array, reference, types: [type]
        };
    });
}
//# sourceMappingURL=inferred-types.js.map