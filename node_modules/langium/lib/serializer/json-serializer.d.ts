/******************************************************************************
 * Copyright 2021 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import { NameProvider } from '../references/name-provider';
import { LangiumServices } from '../services';
import { AstNode, GenericAstNode, Reference } from '../syntax-tree';
import { AstNodeLocator } from '../workspace/ast-node-locator';
export interface JsonSerializeOptions {
    space?: string | number;
    refText?: boolean;
}
/**
 * Utility service for transforming an `AstNode` into a JSON string and vice versa.
 */
export interface JsonSerializer {
    /**
     * Serialize an `AstNode` into a JSON `string`.
     * @param node The `AstNode` to be serialized.
     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
     */
    serialize(node: AstNode, options?: JsonSerializeOptions): string;
    /**
     * Deserialize (parse) a JSON `string` into an `AstNode`.
     */
    deserialize(content: string): AstNode;
}
interface IntermediateReference {
    $refText?: string;
    $ref?: string;
    $error?: string;
}
export declare class DefaultJsonSerializer implements JsonSerializer {
    protected ignoreProperties: Set<string>;
    protected readonly astNodeLocator: AstNodeLocator;
    protected readonly nameProvider: NameProvider;
    constructor(services: LangiumServices);
    serialize(node: AstNode, options?: JsonSerializeOptions): string;
    deserialize(content: string): AstNode;
    protected replacer(key: string, value: unknown, refText?: boolean): unknown;
    protected linkNode(node: GenericAstNode, root: AstNode, container?: AstNode, containerProperty?: string, containerIndex?: number): void;
    protected reviveReference(container: AstNode, property: string, root: AstNode, reference: IntermediateReference): Reference | undefined;
    protected getRefNode(root: AstNode, path: string): AstNode;
}
export {};
//# sourceMappingURL=json-serializer.d.ts.map