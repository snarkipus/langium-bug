/******************************************************************************
 * Copyright 2022 TypeFox GmbH
 * This program and the accompanying materials are made available under the
 * terms of the MIT License, which is available in the project root.
 ******************************************************************************/
import { CompositeGeneratorNode, Generated } from './generator-node';
/**
 * A tag function that attaches the template's content to a {@link CompositeGeneratorNode}.
 * This is done segment by segment, and static template portions as well as substitutions
 * are added individually to the returned {@link CompositeGeneratorNode}.
 * At that common leading indentation of all the template's static parts is trimmed,
 * whereas additional indentations of particular lines within that static parts as well as
 * any linebreaks and indentation within the substititions are kept.
 *
 * For the sake of good readability and good compositionality of results of this function like
 * in the following example, the subsequent rule is applied.
 *
 * ```ts
 *  expandToNode`
 *   This is the beginning of something
 *
 *   ${foo.bar ? epandToNode`
 *     bla bla bla ${foo.bar}
 *
 *   `: undefined
 *   }
 *   end of template
 *  `
 * ```
 *
 * Rule:
 * In case of a multiline template the content of the first line including its terminating
 * linebreak is ignored, if and only if it is empty of contains white space only. Futhermore,
 * in case of a multiline template the content of the last line including its preceding linebreak
 * (last one within the template) is ignored, if and only if it is empty of contains white space only.
 * Thus, the result of all of the following invocations is identical and equal to `generatedContent`.
 * ```ts
 *  expandToNode`generatedContent`
 *  expandToNode`generatedContent
 *  `
 *  expandToNode`
 *    generatedContent`
 *  expandToNode`
 *    generatedContent
 *  `
 * ```
 *
 * @param staticParts the static parts of a tagged template literal
 * @param substitutions the variable parts of a tagged template literal
 * @returns a 'CompositeGeneratorNode' containing the particular aligned lines
 *             after resolving and inserting the substitutions into the given parts
 */
export declare function expandToNode(staticParts: TemplateStringsArray, ...substitutions: unknown[]): CompositeGeneratorNode;
export interface JoinOptions<T> {
    prefix?: (element: T, index: number, isLast: boolean) => Generated | undefined;
    suffix?: (element: T, index: number, isLast: boolean) => Generated | undefined;
    appendNewLineIfNotEmpty?: true;
}
export declare function joinToNode<T>(iterable: Iterable<T> | T[], toString?: (element: T, index: number, isLast: boolean) => Generated, { prefix, suffix, appendNewLineIfNotEmpty }?: JoinOptions<T>): CompositeGeneratorNode | undefined;
//# sourceMappingURL=template-node.d.ts.map